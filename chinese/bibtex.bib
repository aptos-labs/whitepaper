@inproceedings{all_you_need_is_dag,
author = {Keidar, Idit and Kokoris-Kogias, Eleftherios and Naor, Oded and Spiegelman, Alexander},
title = {All You Need is DAG},
year = {2021},
isbn = {9781450385480},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3465084.3467905},
doi = {10.1145/3465084.3467905},
abstract = {We present DAG-Rider, the first asynchronous Byzantine Atomic Broadcast protocol that achieves optimal resilience, optimal amortized communication complexity, and optimal time complexity. DAG-Rider is post-quantum safe and ensures that all values proposed by correct processes eventually get delivered. We construct DAG-Rider in two layers: In the first layer, processes reliably broadcast their proposals and build a structured Directed Acyclic Graph (DAG) of the communication among them. In the second layer, processes locally observe their DAGs and totally order all proposals with no extra communication.},
booktitle = {Proceedings of the 2021 ACM Symposium on Principles of Distributed Computing},
pages = {165–175},
numpages = {11},
keywords = {atomic broadcast, quantum safe, asynchrony, byzantine smr},
location = {Virtual Event, Italy},
series = {PODC'21}
}
@misc{aptos_core_github,
  title={Aptos-core},
  year={2022},
  url={https://github.com/aptos-labs/aptos-core},
}

@online{a16_state,
  author = {Daren Matsuoka and Chris Dixon and Eddy Lazzarin and Robert Hackett},
  title = {Introducing the 2022 State of Crypto Report},
  year = 2022,
  url = {https://a16z.com/tag/state-of-crypto-2022/},
}

@article{be_aware,
  author    = {Shir Cohen and
               Rati Gelashvili and
               Lefteris Kokoris{-}Kogias and
               Zekun Li and
               Dahlia Malkhi and
               Alberto Sonnino and
               Alexander Spiegelman},
  title     = {Be Aware of Your Leaders},
  journal   = {CoRR},
  volume    = {abs/2110.00960},
  year      = {2021},
  url       = {https://arxiv.org/abs/2110.00960},
  eprinttype = {arXiv},
  eprint    = {2110.00960},
  timestamp = {Mon, 18 Oct 2021 09:15:25 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/abs-2110-00960.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{block_stm,
  doi = {10.48550/ARXIV.2203.06871},
  url = {https://arxiv.org/abs/2203.06871},
  author = {Gelashvili, Rati and Spiegelman, Alexander and Xiang, Zhuolun and Danezis, George and Li, Zekun and Xia, Yu and Zhou, Runtian and Malkhi, Dahlia},
  keywords = {Distributed, Parallel, and Cluster Computing (cs.DC), Performance (cs.PF), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title = {Block-STM: Scaling Blockchain Execution by Turning Ordering Curse to a Performance Blessing},
  publisher = {arXiv},
  year = {2022},
  copyright = {arXiv.org perpetual, non-exclusive license}
}


@inproceedings{bullshark,
author = {Spiegelman, Alexander and Giridharan, Neil and Sonnino, Alberto and Kokoris-Kogias, Lefteris},
title = {Bullshark: DAG BFT Protocols Made Practical},
year = {2022},
publisher = {Association for Computing Machinery},
address = {Los Angeles, CA, USA},
booktitle = {Proceedings of the 20th Conference on Computer and Communications Security (CCS)},
keywords = {Byzantine fault tolerant, consensus protocol},
series = {CCS '22}
}

@misc{diembft_v4,
    author  = {{The Diem Team}},
    title   = "DiemBFT v4: State Machine Replication in the Diem Blockchain",
    year    = "2021",
    url = {https://developers.diem.com/papers/diem-consensus-state-machine-replication-in-the-diem-blockchain/2021-08-17.pdf},
}

@misc{diem_blockchain,
    author  = {Zachary Amsden and Ramnik Arora and Shehar Bano and Mathieu Baudet and Sam Blackshear and Abhay Bothra and George Cabrera and Christian Catalini and Konstantinos Chalkias and Evan Cheng and Avery Ching and Andrey Chursin and George Danezis and Gerardo Di Giacomo and David L. Dill and Hui Ding and Nick Doudchenko and Victor Gao and Zhenhuan Gao and François Garillot and Michael Gorven and Philip Hayes and J. Mark Hou and Yuxuan Hu and Kevin Hurley and Kevin Lewi and Chunqi Li and Zekun Li and Dahlia Malkhi and Sonia Margulis and Ben Maurer and Payman Mohassel and Ladi de Naurois and Valeria Nikolaenko and Todd Nowacki and Oleksandr Orlov and Dmitri Perelman and Alistair Pott and Brett Proctor and Shaz Qadeer and Rain and Dario Russi and Bryan Schwab and Stephane Sezer and Alberto Sonnino and Herman Venter and Lei Wei and Nils Wernerfelt and Brandon Williams and Qinfan Wu and Xifan Yan and Tim Zakian and Runtian Zhou},
    title   = "The Libra Blockchain",
    year    = "2019",
    url = {https://developers.diem.com/papers/the-diem-blockchain/2020-05-26.pdf},
}

@misc{evolution_state_sync,
    author  = {Joshua Lind},
    title   = "The Evolution of State Sync: The path to 100k+ transactions per second with sub-second latency at Aptos",
    year    = "2022",
    url = {https://medium.com/aptoslabs/52e25a2c6f10},
}

@misc{move,
    author  = {Sam Blackshear and Evan Cheng and David L. Dill and Victor Gao and Ben Maurer and Todd Nowacki and Alistair Pott and Shaz Qadeer and Rain, Dario Russi and Stephane Sezer and Tim Zakian and Runtian Zhou},
    title   = "Move: A Language With Programmable Resources",
    year    = "2019",
    url = {https://developers.diem.com/papers/diem-move-a-language-with-programmable-resources/2019-06-18.pdf},
}

@misc{move_github,
  title={Move},
  year={2022},
  url={https://github.com/move-language/move},
}

@InProceedings{move_prover,
author="Dill, David
and Grieskamp, Wolfgang
and Park, Junkil
and Qadeer, Shaz
and Xu, Meng
and Zhong, Emma",
editor="Fisman, Dana
and Rosu, Grigore",
title="Fast and Reliable Formal Verification of Smart Contracts with the Move Prover",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="183--200",
abstract="The Move Prover (MVP) is a formal verifier for smart contracts written in the Move programming language. MVP has an expressive specification language, and is fast and reliable enough that it can be run routinely by developers and in integration testing. Besides the simplicity of smart contracts and the Move language, three implementation approaches are responsible for the practicality of MVP: (1) an alias-free memory model, (2) fine-grained invariant checking, and (3) monomorphization. The entirety of the Move code for the Diem blockchain has been extensively specified and can be completely verified by MVP in a few minutes. Changes in the Diem framework must be successfully verified before being integrated into the open source repository on GitHub.",
isbn="978-3-030-99524-9"
}

@inproceedings{narwhal_tusk,
author = {Danezis, George and Kokoris-Kogias, Lefteris and Sonnino, Alberto and Spiegelman, Alexander},
title = {Narwhal and Tusk: A DAG-Based Mempool and Efficient BFT Consensus},
year = {2022},
isbn = {9781450391627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3492321.3519594},
doi = {10.1145/3492321.3519594},
abstract = {We propose separating the task of reliable transaction dissemination from transaction ordering, to enable high-performance Byzantine fault-tolerant quorum-based consensus. We design and evaluate a mempool protocol, Narwhal, specializing in high-throughput reliable dissemination and storage of causal histories of transactions. Narwhal tolerates an asynchronous network and maintains high performance despite failures. Narwhal is designed to easily scale-out using multiple workers at each validator, and we demonstrate that there is no foreseeable limit to the throughput we can achieve.Composing Narwhal with a partially synchronous consensus protocol (Narwhal-HotStuff) yields significantly better throughput even in the presence of faults or intermittent loss of liveness due to asynchrony. However, loss of liveness can result in higher latency. To achieve overall good performance when faults occur we design Tusk, a zero-message overhead asynchronous consensus protocol, to work with Narwhal. We demonstrate its high performance under a variety of configurations and faults.As a summary of results, on a WAN, Narwhal-Hotstuff achieves over 130,000 tx/sec at less than 2-sec latency compared with 1,800 tx/sec at 1-sec latency for Hotstuff. Additional workers increase throughput linearly to 600,000 tx/sec without any latency increase. Tusk achieves 160,000 tx/sec with about 3 seconds latency. Under faults, both protocols maintain high throughput, but Narwhal-HotStuff suffers from increased latency.},
booktitle = {Proceedings of the Seventeenth European Conference on Computer Systems},
pages = {34–50},
numpages = {17},
keywords = {Byzantine fault tolerant, consensus protocol},
location = {Rennes, France},
series = {EuroSys '22}
}

@online{lost_passwords,
  author = {Nathaniel Popper},
  title = {Lost Passwords Lock Millionaires Out of Their Bitcoin Fortunes},
  year = 2021,
  url = {https://www.nytimes.com/2021/01/12/technology/bitcoin-passwords-wallets-fortunes.html},
  urldate = {2021-01-12}
}

@misc{waypoints,
    author  = {{The Diem Team}},
    title   = "State Synchronization and Verification of Committed Information in a System with Reconfigurations",
    year    = "2020",
    url = {https://github.com/aptos-labs/aptos-core/blob/main/documentation/tech-papers/lbft-verification/lbft-verification.pdf},
}